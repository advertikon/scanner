options
{
	LOOKAHEAD=2;
}
PARSER_BEGIN(Calculator)
public class Calculator
{
	public static void main(String args[]) throws ParseException 
	{
		Calculator parser = new Calculator(System.in);
		parser.setIsDegree();
		while (true) {
			System.out.println( "New expression: " );
			double result = parser.parseOneLine();
			System.out.println( "= " + result );
		}
	}

	static protected boolean mIsRadians = true;
	static protected int mPresission = 10;

	static public void setIsDegree() {
		mIsRadians = false;
	}

	static public void setIsRadians() {
		mIsRadians = true;
	}

	public static double round( double value, int places ) {
		if (places < 0) throw new IllegalArgumentException();

		java.math.BigDecimal bd = new java.math.BigDecimal(value);
		bd = bd.setScale( places, java.math.RoundingMode.HALF_UP );

		return bd.doubleValue();
	}
}
PARSER_END(Calculator)
SKIP :
{
	" "
|   "\r"
|   "\t"
}
TOKEN:
{
	< DOT      : "." >
|   < DIGIT    : ["0"-"9"] >
|	< FLOAT    : (<DIGIT>)+ <DOT> (<DIGIT>)+ >
|	< HLFLOAT  :  <DOT> (<DIGIT>)+ >
|   < PLUS     : "+" >
|   < MINUS    : "-" >
|   < PRODUCT  : "*" >
|   < DIVIDE   : "/" >
|   < LBRACE   : "(" >
|   < RBRACE   : ")" >
|   < POWER    : "^" >
|   < SQRT     : "sqrt" >
|   < LOG10    : "log10" >
|   < SIN      : "sin" >
|   < COS      : "cos" >
|   < TAN      : "tan" >
|   < ASIN     : "asin" >
|   < ACOS     : "acos" >
|   < ATAN     : "atan" >
|   < LOG      : "log" >
|   < EOL      : "\n" >
}
double parseOneLine():
{
	double a;
}
{
	a=expr() <EOL>  { return a; }
  | <EOL>
  | <EOF>           { System.exit(-1); }
}
double expr():
{
	double a;
	double b;
}
{
	a = term()
	(
		<PLUS>  b=expr()    { a += b; }
	|   <MINUS> b=expr()    { a -= b; }
	)*
		{ return round( a, mPresission ); }
}
double term():
{
	double a;
	double b;
}
{
	a=unary()
	(
		<PRODUCT>   b=term()    { a *= b; }
	|   <DIVIDE>    b=term()    { a /= b; }
	|   <POWER>     b=term()    { a = Math.pow( a, b ); }
	)*
		{ return a; }
}
double unary():
{
	double a;
}
{
	(
		a=element()
	|   <MINUS> a=element() { a *= -1; }
	|   <LOG>   a=element() { a = Math.log( a ); }
	|   <LOG10> a=element() { a = Math.log10( a ); }
	|   <SQRT>	a=element() { a = Math.sqrt( a ); }
	|   <SIN>   a=element() { a = Math.sin( mIsRadians ? a : Math.toRadians( a ) ); } 
	|   <COS>   a=element() { a = Math.cos( mIsRadians ? a : Math.toRadians( a ) ); } 
	|   <TAN>   a=element() { a = Math.tan( mIsRadians ? a : Math.toRadians( a ) ); } 
	|   <ASIN>  a=element() { a = Math.asin( mIsRadians ? a : Math.toRadians( a ) ); } 
	|   <ACOS>  a=element() { a = Math.acos( mIsRadians ? a : Math.toRadians( a ) ); } 
	|   <ATAN>  a=element() { a = Math.atan( mIsRadians ? a : Math.toRadians( a ) ); } 
	)
		{ return a; }
}
double element():
{
	double a;
}
{
	a=number()					{ return a; }
|   <LBRACE> a=expr() <RBRACE>	{ return a; }
}

double number() throws NumberFormatException:
{
	Token t;
}
{
	t=<DIGIT>	{ return Double.parseDouble( t.toString() ); }
|	t=<FLOAT>	{ return Double.parseDouble( t.toString() ); }
|	t=<HLFLOAT>	{ return Double.parseDouble( t.toString() ); }
}