import java.io.IOException;
import java.util.ArrayList;

public class Calc {
	private LinkedList<String> queue = new LinkedList<>();
	private LinkedList<String> stack = new LinkedList<>();

	public static void main( String[] args ) {
		new Calc().run();
	}

	public void run() {
		while( true ) {
			StringBuilder input = new StringBuilder();

			try {
				while ( true ) {
					int c = System.in.read();

					if ( 10 == c ) {
						break;
					}

					if ( -1 == c ) {
						return;
					}

					input.append( (char) c );
				}
				
			} catch ( IOException e ) {
				System.out.println( e );
			}

			System.out.println( input.toString() );
			calculate( input.toString() );
		}
	}

	private void calculate( String s ) {
		toStack( s );
	}

	private void toStack( String s ) {
		Tokenizer t = new Tokenizer( s );
		String token;

		while ( null != ( token = t.get() ) ) {
			System.out.println( token );
		}
// 		while there are tokens to be read:
// 	read a token.
// 	if the token is a number, then:
//         push it to the output queue.
//     if the token is a function then:
// 		push it onto the operator stack 
// 	if the token is an operator, then:
// 		while ((there is a function at the top of the operator stack)
// 		       or (there is an operator at the top of the operator stack with greater precedence)
// 		       or (the operator at the top of the operator stack has equal precedence and is left associative))
// 		      and (the operator at the top of the operator stack is not a left bracket):
// 			pop operators from the operator stack onto the output queue.
// 		push it onto the operator stack.
// 	if the token is a left bracket (i.e. "("), then:
// 		push it onto the operator stack.
// 	if the token is a right bracket (i.e. ")"), then:
// 		while the operator at the top of the operator stack is not a left bracket:
// 			pop the operator from the operator stack onto the output queue.
// 		pop the left bracket from the stack.
// 		/* if the stack runs out without finding a left bracket, then there are mismatched parentheses. */
// if there are no more tokens to read:
// 	while there are still operator tokens on the stack:
// 		/* if the operator token on the top of the stack is a bracket, then there are mismatched parentheses. */
// 		pop the operator from the operator stack onto the output queue.
// exit.
	}

	private void prosessStack() {
// 		for each token in the postfix expression:
//   if token is an operator:
//     operand_2 ← pop from the stack
//     operand_1 ← pop from the stack
//     result ← evaluate token with operand_1 and operand_2
//     push result back onto the stack
//   else if token is an operand:
//     push token onto the stack
// result ← pop from the stack
	}
}

class Tokenizer {
	private int mOffset = 0;
	private String mString;

	Tokenizer( String string ) {
		if ( null == string ) {
			string = "";
		}

		mString = string;
	}

	public void reset() {
		mOffset = 0;
	}

	public String get() {
		int l = mString.length();
		while( mOffset < l ) {
			int c = mString.charAt( mOffset );

		}
	}
}